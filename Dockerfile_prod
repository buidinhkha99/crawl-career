# For production use

# Frontend builder stage
FROM ubuntu:22.04 AS frontendBuilder

ARG WWWGROUP
ARG NODE_VERSION=18

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND noninteractive
ENV TZ=UTC

RUN apt-get update \
    && apt-get install -y curl ca-certificates \
    && curl -sLS https://deb.nodesource.com/setup_$NODE_VERSION.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

COPY public ./public
COPY resources ./resources
COPY package.json .
COPY package-lock.json .
COPY postcss.config.js .
COPY tailwind.config.js .
COPY vite.config.js .
COPY packages ./packages

RUN npm install && npm run build

# Executive stage
FROM ubuntu:22.04

ARG WWWGROUP=1000
ARG NOVA_EMAIL
ARG NOVA_PASSWORD

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND noninteractive
ENV TZ=UTC

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update \
    && apt-get install -y software-properties-common gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python2 \
    && mkdir -p ~/.gnupg \
    && chmod 600 ~/.gnupg \
    && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf \
    && echo "keyserver hkp://keyserver.ubuntu.com:80" >> ~/.gnupg/dirmngr.conf \
    && gpg --recv-key 0x14aa40ec0831756756d7f66c4f4ea0aae5267a6c \
    && gpg --export 0x14aa40ec0831756756d7f66c4f4ea0aae5267a6c > /usr/share/keyrings/ppa_ondrej_php.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu jammy main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.2-cli php8.2-dev \
       php8.2-pgsql php8.2-sqlite3 php8.2-gd \
       php8.2-curl \
       php8.2-imap php8.2-mysql php8.2-mbstring php8.2-mcrypt \
       php8.2-xml php8.2-zip php8.2-bcmath php8.2-soap \
       php8.2-intl php8.2-readline \
       php8.2-ldap \
       php8.2-msgpack php8.2-igbinary php8.2-redis php8.2-swoole \
       php8.2-memcached php8.2-pcov php8.2-xdebug \
       wkhtmltopdf php8.2-imagick php8.2-opcache php-font-lib \
    && php -r "readfile('https://getcomposer.org/installer');" | php -- --install-dir=/usr/bin/ --filename=composer \
    && apt-get update \
    && apt-get install -y mysql-client \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.2

## Setup cron for laravel schedule
RUN apt-get update -yqq && apt-get install -yqq cron && systemctl enable cron.service && service cron restart
COPY docker/cron /etc/cron.d/cron
RUN crontab /etc/cron.d/cron

COPY docker/start-container /usr/local/bin/start-container
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/php.ini /etc/php/8.2/cli/conf.d/99-sail.ini
COPY docker/resolv.conf /etc/resolv.conf

COPY app ./app
COPY bootstrap ./bootstrap
COPY config ./config
COPY database ./database
COPY lang ./lang
COPY resources ./resources
COPY routes ./routes
COPY tests ./test
COPY artisan .
COPY composer.json .
COPY composer.lock .
COPY phpunit.xml .
COPY nova-components ./nova-components
COPY packages ./packages
COPY public ./public
COPY --from=frontendBuilder /var/www/html/public/build ./public/build

RUN mkdir -p storage/app/public
RUN mkdir -p storage/framework/views
RUN mkdir -p storage/framework/cache/data
RUN mkdir -p storage/framework/sessions
RUN mkdir -p storage/framework/testing
RUN mkdir -p storage/logs

RUN chmod +x artisan
RUN composer config http-basic.nova.laravel.com $NOVA_EMAIL $NOVA_PASSWORD
RUN composer install

RUN chmod +x /usr/local/bin/start-container

RUN php artisan cache:clear
RUN chmod -R 755 storage/
RUN composer dump-autoload

EXPOSE 80
ENTRYPOINT ["/usr/local/bin/start-container"]
